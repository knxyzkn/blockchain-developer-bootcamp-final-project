{"version":3,"sources":["getWeb3.js","components/CategoryTable.js","components/NotWeb3.js","components/GeneralSection.js","components/Bottom.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","CategoryTable","TableContainer","component","Paper","Table","sx","minWidth","aria-label","TableHead","TableRow","TableCell","style","fontWeight","align","TableBody","this","props","catList","map","item","index","key","border","scope","name","balance","need","Component","NotWeb3","className","Typography","marginLeft","marginRight","marginBottom","GeneralSection","StyledTextFieldAccount","styled","TextField","borderColor","borderWidth","id","label","defaultValue","contractAddress","InputProps","readOnly","width","accounts","helperText","Bottom","height","backgroundColor","color","App","state","catListLength","contract","catName","catbalance","catNeed","inputCategoryValue","inputCategoryValueError","inputAmountValue","inputAmountValueError","inputCreateCategoryValue","inputCreateCategoryValueError","inputCreateNeedAmount","inputCreateNeedAmountError","inputUpdateCategoryValue","inputUpdateCategoryValueError","inputUpdateNeedAmount","inputUpdateNeedAmountError","usd","componentDidMount","web3oracle","process","RINKEBY_INFURA_PROJECT_ID","aggregatorV3InterfaceABI","eth","Contract","methods","latestRoundData","call","then","roundData","setState","answer","toFixed","getAccounts","net","getId","networkId","deployedNetwork","CryptoDonater","networks","instance","abi","address","getCatListLength","i","getCatValues","catValue","push","runExample","alert","error","handleDonateButtonClick","event","isNaN","sendDonation","send","from","value","Math","round","catch","message","handleCreateButtonClick","createCategory","handleUpdateButtonClick","updateCategoryNeed","target","margin","select","required","onChange","handleCategoryInputChange","bind","size","MenuItem","variant","handleAmountInputChange","disabled","pow","Button","disableElevation","onClick","handleCategoryResetButtonClick","handleCreateCategoryInputChange","handleCreateNeedInputChange","handleCreateResetButtonClick","handleUpdateCategoryInputChange","handleUpdateNeedInputChange","handleUpdateResetButtonClick","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mp9bAqCeA,EAnCC,kBACd,IAAIC,SAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxB,sBAAgC,kCAAAC,EAAA,0DAE1BF,OAAOG,SAFmB,wBAGtBC,EAAO,IAAIC,IAAKL,OAAOG,UAHD,kBAMpBH,OAAOG,SAASG,SANI,OAQ1BR,EAAQM,GARkB,gDAU1BL,EAAO,EAAD,IAVoB,gCAcrBC,OAAOI,MAERA,EAAOJ,OAAOI,KACpBG,QAAQC,IAAI,2BACZV,EAAQM,KAIFK,EAAW,IAAIJ,IAAKK,UAAUC,aAClC,yBAEIP,EAAO,IAAIC,IAAKI,GACtBF,QAAQC,IAAI,gDACZV,EAAQM,IA3BoB,8D,mGCgCrBQ,E,iLAhCX,OACE,6BACE,kBAACC,EAAA,EAAD,CAAgBC,UAAWC,KACzB,kBAACC,EAAA,EAAD,CAAOC,GAAI,CAAEC,SAAU,KAAOC,aAAW,kBACvC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,MAAO,CAACC,WAAY,SAA/B,SACA,kBAACF,EAAA,EAAD,CAAWG,MAAM,OAAOF,MAAO,CAACC,WAAY,SAA5C,sBACA,kBAACF,EAAA,EAAD,CAAWG,MAAM,QAAQF,MAAO,CAACC,WAAY,SAA7C,iBACA,kBAACF,EAAA,EAAD,CAAWG,MAAM,QAAQF,MAAO,CAACC,WAAY,SAA7C,gBAGJ,kBAACE,EAAA,EAAD,KACGC,KAAKC,MAAMC,QAAQC,KAAI,SAACC,EAAMC,GAAP,OACtB,kBAACX,EAAA,EAAD,CACEY,IAAKD,EACLf,GAAI,CAAE,mCAAoC,CAAEiB,OAAQ,KAEpD,kBAACZ,EAAA,EAAD,CAAWR,UAAU,KAAKqB,MAAM,QAAQH,GACxC,kBAACV,EAAA,EAAD,CAAWG,MAAM,QAAQM,EAAKK,MAC9B,kBAACd,EAAA,EAAD,CAAWG,MAAM,SAASM,EAAKM,SAC/B,kBAACf,EAAA,EAAD,CAAWG,MAAM,SAASM,EAAKO,kB,GAvBrBC,aCgBbC,E,iLAdX,OACE,yBAAKC,UAAU,OACb,8CACA,kBAACC,EAAA,EAAD,CAAYjB,MAAM,SAASF,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,SAAxF,8BAGA,kBAACH,EAAA,EAAD,CAAYjB,MAAM,SAASF,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,SAAxF,mG,GARcN,a,OCiDPO,E,iLA9CX,IAAMC,EAAyBC,YAAOC,IAAPD,CAAkB,CAC/C,qBAAsB,CACpBE,YAAa,UACbC,YAAa,KAIjB,OACE,6BACE,kBAACT,EAAA,EAAD,CAAYjB,MAAM,OAAOF,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,SAAtF,0EAGA,kBAACH,EAAA,EAAD,CAAYjB,MAAM,OAAOF,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,SAAtF,uHAGA,kBAACH,EAAA,EAAD,CAAYjB,MAAM,OAAOF,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,SAAtF,gJAGA,6BACE,kBAACI,EAAA,EAAD,CACCG,GAAG,8BACHC,MAAM,qCACNC,aAAc3B,KAAKC,MAAM2B,gBACzBC,WAAY,CACVC,UAAU,GAEZlC,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,OAAQa,MAAO,WAG/E,6BACE,kBAACX,EAAD,CACCK,GAAG,8BACHC,MAAM,gCACNC,aAAc3B,KAAKC,MAAM+B,SAAS,GAClCC,WAAW,6FACXJ,WAAY,CACVC,UAAU,GAEZlC,MAAO,CAAEoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,OAAQa,MAAO,gB,GAxC3DnB,aCUdsB,E,iLAVX,OACE,yBAAKtC,MAAO,CAACuC,OAAQ,OAAQC,gBAAiB,UAAWC,MAAO,YAC9D,yBAAKvB,UAAU,eACb,kE,GALWF,aCmiBN0B,G,iNAthBbC,MAAQ,CACNX,gBAAiB,KACjBY,cAAe,KACf/D,KAAM,KACNuD,SAAU,KACVS,SAAU,KACVvC,QAAS,KACTwC,QAAS,KACTC,WAAY,KACZC,QAAS,KACTC,mBAAoB,GACpBC,yBAAyB,EACzBC,iBAAkB,GAClBC,uBAAuB,EACvBC,yBAA0B,GAC1BC,+BAA+B,EAC/BC,sBAAuB,GACvBC,4BAA4B,EAC5BC,yBAA0B,GAC1BC,+BAA+B,EAC/BC,sBAAuB,GACvBC,4BAA4B,EAC5BC,IAAK,M,EAGPC,kB,sBAAoB,gDAAAnF,EAAA,sEAMVoF,EAAa,IAAIjF,IAAJ,uCAAyCkF,6DAAYC,4BAClEC,EAA2B,CAAC,CAAE,OAAU,GAAI,KAAQ,WAAY,QAAW,CAAC,CAAE,aAAgB,QAAS,KAAQ,GAAI,KAAQ,UAAY,gBAAmB,OAAQ,KAAQ,YAAc,CAAE,OAAU,GAAI,KAAQ,cAAe,QAAW,CAAC,CAAE,aAAgB,SAAU,KAAQ,GAAI,KAAQ,WAAa,gBAAmB,OAAQ,KAAQ,YAAc,CAAE,OAAU,CAAC,CAAE,aAAgB,SAAU,KAAQ,WAAY,KAAQ,WAAa,KAAQ,eAAgB,QAAW,CAAC,CAAE,aAAgB,SAAU,KAAQ,UAAW,KAAQ,UAAY,CAAE,aAAgB,SAAU,KAAQ,SAAU,KAAQ,UAAY,CAAE,aAAgB,UAAW,KAAQ,YAAa,KAAQ,WAAa,CAAE,aAAgB,UAAW,KAAQ,YAAa,KAAQ,WAAa,CAAE,aAAgB,SAAU,KAAQ,kBAAmB,KAAQ,WAAa,gBAAmB,OAAQ,KAAQ,YAAc,CAAE,OAAU,GAAI,KAAQ,kBAAmB,QAAW,CAAC,CAAE,aAAgB,SAAU,KAAQ,UAAW,KAAQ,UAAY,CAAE,aAAgB,SAAU,KAAQ,SAAU,KAAQ,UAAY,CAAE,aAAgB,UAAW,KAAQ,YAAa,KAAQ,WAAa,CAAE,aAAgB,UAAW,KAAQ,YAAa,KAAQ,WAAa,CAAE,aAAgB,SAAU,KAAQ,kBAAmB,KAAQ,WAAa,gBAAmB,OAAQ,KAAQ,YAAc,CAAE,OAAU,GAAI,KAAQ,UAAW,QAAW,CAAC,CAAE,aAAgB,UAAW,KAAQ,GAAI,KAAQ,YAAc,gBAAmB,OAAQ,KAAQ,aACh7C,6CACK,IAAIH,EAAWI,IAAIC,SAASF,EADjC,8CAEHG,QAAQC,kBAAkBC,OAC/BC,MAAK,SAACC,GACH,EAAKC,SAAS,CAACb,KAAMY,EAAUE,OAAO,KAAWC,QAAQ,QAZjD,SAiBGvG,IAjBH,cAiBVQ,EAjBU,iBAoBOA,EAAKsF,IAAIU,cApBhB,eAoBVzC,EApBU,iBAuBQvD,EAAKsF,IAAIW,IAAIC,QAvBrB,eAuBVC,EAvBU,OA0BVC,EAAkBC,EAAcC,SAASH,GAGzCI,EAAW,IAAIvG,EAAKsF,IAAIC,SAC5Bc,EAAcG,IACdJ,GAAmBA,EAAgBK,SA/BrB,UAqCYF,EAASf,QAAQkB,mBAAmBhB,OArChD,QAqCV3B,EArCU,OAyCZtC,EAAU,GACNkF,EAAE,EA1CM,aA0CHA,EAAE5C,GA1CC,kCA2CSwC,EAASf,QAAQoB,aAAaD,GAAGjB,OA3C1C,QA2CRmB,EA3CQ,OA4CdpF,EAAQqF,KAAK,CAAC9E,KAAM6E,EAAS,GAAI5E,QAAS4E,EAAS,GAAI3E,KAAM2E,EAAS,KA5CxD,QA0CcF,IA1Cd,wBAiDhB,EAAKd,SAAS,CACZ7F,OACAuD,WACAS,SAAUuC,EACVpD,gBAAiBiD,EAAgBK,QACjC1C,gBACAtC,WACC,EAAKsF,YAxDQ,kDAqEhBC,MAAM,uMAGN7G,QAAQ8G,MAAR,MAxEgB,0D,EA4EpBF,W,sBAAa,sBAAAjH,EAAA,0F,EAoCboH,wB,uCAA0B,WAAOC,GAAP,mBAAArH,EAAA,kEAIe,KAAlC,EAAKgE,MAAMM,mBAJQ,gCAKd,EAAKyB,SAAS,CAACxB,yBAAyB,IAL1B,6CAOd,EAAKwB,SAAS,CAACxB,yBAAyB,IAP1B,UASa,KAAhC,EAAKP,MAAMQ,iBATQ,kCAUd,EAAKuB,SAAS,CAACtB,uBAAuB,IAVxB,oCAWd6C,MAAM,EAAKtD,MAAMQ,kBAXH,kCAad,EAAKuB,SAAS,CAACtB,uBAAuB,IAbxB,qCAcZ,EAAKT,MAAMQ,iBAAiB,GAdhB,kCAed,EAAKuB,SAAS,CAACtB,uBAAuB,IAfxB,iDAiBd,EAAKsB,SAAS,CAACtB,uBAAuB,IAjBxB,WAoBlB,EAAKT,MAAMO,yBAA4B,EAAKP,MAAMS,sBApBhC,wBAqBhB9C,EAAU,GArBM,UAsBd,EAAKqC,MAAME,SAASwB,QACzB6B,aAAa,EAAKvD,MAAMM,oBACxBkD,KAAK,CAAEC,KAAM,EAAKzD,MAAMP,SAAS,GAAIiE,MAAOC,KAAKC,MAAM,EAAK5D,MAAMQ,oBAClEqD,OAAM,SAACV,GAAYD,MAAM,qFAAD,OAAsF,KAAtF,WAAqGC,EAAMW,aAzBhH,QA0BZjB,EAAE,EA1BU,aA0BPA,EAAE,EAAK7C,MAAMC,eA1BN,kCA2BK,EAAKD,MAAME,SAASwB,QAC1CoB,aAAaD,GACbjB,OACAiC,OAAM,SAACV,GAAY9G,QAAQC,IAAI,QAAS6G,MA9BvB,QA2BZJ,EA3BY,OA+BlBpF,EAAQqF,KAAK,CAAC9E,KAAM6E,EAAS,GAAI5E,QAAS4E,EAAS,GAAI3E,KAAM2E,EAAS,KA/BpD,QA0BqBF,IA1BrB,wBAkCpB,EAAKd,SAAS,CAAEzB,mBAAoB,GAAIE,iBAAkB,GAAI7C,YAlC1C,0DAqCtBtB,QAAQC,IAAI,SAAZ,MArCsB,0D,wDAkExByH,wB,uCAA0B,WAAOV,GAAP,qBAAArH,EAAA,kEAIqB,KAAxC,EAAKgE,MAAMU,yBAJQ,gCAKd,EAAKqB,SAAS,CAACpB,+BAA+B,IALhC,6CAOd,EAAKoB,SAAS,CAACpB,+BAA+B,IAPhC,UASkB,KAArC,EAAKX,MAAMY,sBATQ,kCAUd,EAAKmB,SAAS,CAAClB,4BAA4B,IAV7B,oCAWdyC,MAAM,EAAKtD,MAAMY,uBAXH,kCAad,EAAKmB,SAAS,CAAClB,4BAA4B,IAb7B,qCAcZ,EAAKb,MAAMY,sBAAsB,GAdrB,kCAed,EAAKmB,SAAS,CAAClB,4BAA4B,IAf7B,iDAiBd,EAAKkB,SAAS,CAAClB,4BAA4B,IAjB7B,WAoBlB,EAAKb,MAAMW,+BAAkC,EAAKX,MAAMa,2BApBtC,wBAqBhBlD,EAAU,GArBM,UAsBd,EAAKqC,MAAME,SAASwB,QACzBsC,eAAe,EAAKhE,MAAMU,yBAA0BiD,KAAKC,MAAM,EAAK5D,MAAMY,wBAC1E4C,KAAK,CAAEC,KAAM,EAAKzD,MAAMP,SAAS,KACjCoE,OAAM,SAACV,GAAYD,MAAM,qFAAD,OAAsF,KAAtF,WAAqGC,EAAMW,aAzBhH,yBA0BQ,EAAK9D,MAAME,SAASwB,QAAQkB,mBAAmBhB,OA1BvD,QA0Bd3B,EA1Bc,OA2BZ4C,EAAE,EA3BU,aA2BPA,EAAE5C,GA3BK,kCA4BK,EAAKD,MAAME,SAASwB,QACxCoB,aAAaD,GACbjB,OACAiC,OAAM,SAACV,GAAY9G,QAAQC,IAAI,QAAS6G,MA/BzB,QA4BZJ,EA5BY,OAgClBpF,EAAQqF,KAAK,CAAC9E,KAAM6E,EAAS,GAAI5E,QAAS4E,EAAS,GAAI3E,KAAM2E,EAAS,KAhCpD,QA2BUF,IA3BV,wBAmCpB,EAAKd,SAAS,CAAErB,yBAA0B,GAAIE,sBAAuB,GAAIjD,UAASsC,kBAnC9D,0DAsCpB5D,QAAQC,IAAI,SAAZ,MAtCoB,0D,wDAqE1B2H,wB,uCAA0B,WAAOZ,GAAP,qBAAArH,EAAA,kEAIqB,KAAxC,EAAKgE,MAAMc,yBAJQ,gCAKd,EAAKiB,SAAS,CAAChB,+BAA+B,IALhC,6CAOd,EAAKgB,SAAS,CAACd,4BAA4B,IAP7B,UASkB,KAArC,EAAKjB,MAAMgB,sBATQ,kCAUd,EAAKe,SAAS,CAACd,4BAA4B,IAV7B,oCAWdqC,MAAM,EAAKtD,MAAMgB,uBAXH,kCAad,EAAKe,SAAS,CAACd,4BAA4B,IAb7B,qCAcZ,EAAKjB,MAAMgB,sBAAsB,GAdrB,kCAed,EAAKe,SAAS,CAACd,4BAA4B,IAf7B,iDAiBd,EAAKc,SAAS,CAACd,4BAA4B,IAjB7B,WAoBlB,EAAKjB,MAAMe,+BAAkC,EAAKf,MAAMiB,2BApBtC,wBAqBhBtD,EAAU,GArBM,UAsBd,EAAKqC,MAAME,SAASwB,QACzBwC,mBAAmB,EAAKlE,MAAMc,yBAA0B6C,KAAKC,MAAM,EAAK5D,MAAMgB,wBAC9EwC,KAAK,CAAEC,KAAM,EAAKzD,MAAMP,SAAS,KACjCoE,OAAM,SAACV,GAAYD,MAAM,qFAAD,OAAsF,KAAtF,WAAqGC,EAAMW,aAzBhH,yBA0BQ,EAAK9D,MAAME,SAASwB,QAAQkB,mBAAmBhB,OA1BvD,QA0Bd3B,EA1Bc,OA2BZ4C,EAAE,EA3BU,aA2BPA,EAAE5C,GA3BK,kCA4BK,EAAKD,MAAME,SAASwB,QACxCoB,aAAaD,GACbjB,OACAiC,OAAM,SAACV,GAAY9G,QAAQC,IAAI,QAAS6G,MA/BzB,QA4BZJ,EA5BY,OAgClBpF,EAAQqF,KAAK,CAAC9E,KAAM6E,EAAS,GAAI5E,QAAS4E,EAAS,GAAI3E,KAAM2E,EAAS,KAhCpD,QA2BUF,IA3BV,wBAmCpB,EAAKd,SAAS,CAAEjB,yBAA0B,GAAIE,sBAAuB,GAAIrD,UAASsC,kBAnC9D,0DAsCpB5D,QAAQC,IAAI,SAAZ,MAtCoB,0D,+IA3JF+G,GAExB5F,KAAKsE,SAAS,CAACzB,mBAAoB+C,EAAMc,OAAOT,U,8CAG1BL,GAEtB5F,KAAKsE,SAAS,CAACvB,iBAAkB6C,EAAMc,OAAOT,U,qDAGjBL,GAE7B5F,KAAKsE,SAAS,CACZzB,mBAAoB,GACpBE,iBAAkB,GAClBC,uBAAuB,EACvBF,yBAAyB,M,sDAkDK8C,GAE9B5F,KAAKsE,SAAS,CAACrB,yBAA0B2C,EAAMc,OAAOT,U,kDAG5BL,GAE1B5F,KAAKsE,SAAS,CAACnB,sBAAuByC,EAAMc,OAAOT,U,mDAGxBL,GAE3B5F,KAAKsE,SAAS,CACZrB,yBAA0B,GAC1BE,sBAAuB,GACvBD,+BAA+B,EAC/BE,4BAA4B,M,sDAqDAwC,GAE9B5F,KAAKsE,SAAS,CAACjB,yBAA0BuC,EAAMc,OAAOT,U,kDAG5BL,GAE1B5F,KAAKsE,SAAS,CAACf,sBAAuBqC,EAAMc,OAAOT,U,mDAGxBL,GAE3B5F,KAAKsE,SAAS,CACZjB,yBAA0B,GAC1BE,sBAAuB,GACvBD,+BAA+B,EAC/BE,4BAA4B,M,+BAgDhC,OAAKxD,KAAKuC,MAAM9D,KAId,yBAAKqC,UAAU,OACb,8CACA,kBAAC,EAAD,CACEc,gBAAiB5B,KAAKuC,MAAMX,gBAC5BI,SAAUhC,KAAKuC,MAAMP,WAGvB,wBAAIpC,MAAO,CAAC+G,OAAQ,SAEpB,mDAEA,kBAAC5F,EAAA,EAAD,CAAYjB,MAAM,OAAOF,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,SAAtF,+DAIA,6BAEIlB,KAAKuC,MAAMC,cACX,yBAAK5C,MAAO,CAAC+G,OAAQ,QACnB,kBAAC,EAAD,CAAezG,QAASF,KAAKuC,MAAMrC,WAGrC,kBAACa,EAAA,EAAD,CAAYjB,MAAM,OAAOF,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,SAAtF,2BAMJ,wBAAItB,MAAO,CAAC+G,OAAQ,SAEpB,qCAEA,6BACE,kBAAC5F,EAAA,EAAD,CAAYjB,MAAM,OAAOF,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,SAAtF,wTAIA,6BACE,kBAACI,EAAA,EAAD,CACEG,GAAG,kBACHmF,QAAM,EACNlF,MAAM,uBACNmF,UAAQ,EACRZ,MAAOjG,KAAKuC,MAAMM,mBAClBZ,WAAYjC,KAAKuC,MAAMO,wBAA0B,2BAA6B,8BAC9E4C,MAAO1F,KAAKuC,MAAMO,wBAClBgE,SAAU9G,KAAK+G,0BAA0BC,KAAKhH,MAC9CiH,KAAK,QACLrH,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,SAE5DlB,KAAKuC,MAAMrC,QAAQC,KAAI,SAACC,EAAMC,GAAP,OACtB,kBAAC6G,EAAA,EAAD,CAAU5G,IAAKD,EAAO4F,MAAO5F,GAC1BA,EADH,IACWD,EAAKK,WAMtB,6BACE,kBAACa,EAAA,EAAD,CACEG,GAAG,eACHC,MAAM,SACNyF,QAAQ,WACRN,UAAQ,EACRZ,MAAOjG,KAAKuC,MAAMQ,iBAClBd,WAAYjC,KAAKuC,MAAMS,sBAAwB,6BAA+B,4BAC9E0C,MAAO1F,KAAKuC,MAAMS,sBAClB8D,SAAU9G,KAAKoH,wBAAwBJ,KAAKhH,MAC5CiH,KAAK,QACLrH,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,UAE/D,kBAACI,EAAA,EAAD,CACEG,GAAG,eACHC,MAAM,gBACNyF,QAAQ,WACRN,UAAQ,EACRQ,UAAQ,EACRpB,OAAQC,KAAKC,MAAMnG,KAAKuC,MAAMQ,iBAAiB/C,KAAKuC,MAAMkB,IAAIyC,KAAKoB,IAAI,GAAG,IAAM,KAAO,KAAK9C,QAAQ,GACpGvC,WAAU,wBAAmBjC,KAAKuC,MAAMkB,KACxCwD,KAAK,QACLrH,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,WAIjE,6BACE,kBAACqG,EAAA,EAAD,CAAQN,KAAK,QAAQE,QAAQ,YAAYK,kBAAgB,EACrDC,QAASzH,KAAK2F,wBAAwBqB,KAAKhH,MAC3CJ,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,SAFjE,UAIA,kBAACqG,EAAA,EAAD,CAAQN,KAAK,QAAQE,QAAQ,WAAWK,kBAAgB,EACtDC,QAASzH,KAAK0H,+BAA+BV,KAAKhH,MAClDJ,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,SAF/D,WAOJ,wBAAItB,MAAO,CAAC+G,OAAQ,SAEpB,oDACA,6BACE,kBAAC5F,EAAA,EAAD,CAAYjB,MAAM,OAAOF,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,SAAtF,qUAGA,6BACE,6BACE,kBAACI,EAAA,EAAD,CACEG,GAAG,iBACHC,MAAM,qBACNyF,QAAQ,WACRN,UAAQ,EACRZ,MAAOjG,KAAKuC,MAAMU,yBAClBhB,WAAYjC,KAAKuC,MAAMW,8BAAgC,2BAA6B,qCACpFwC,MAAO1F,KAAKuC,MAAMW,8BAClB4D,SAAU9G,KAAK2H,gCAAgCX,KAAKhH,MACpDiH,KAAK,QACLrH,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,UAE/D,kBAACI,EAAA,EAAD,CACEG,GAAG,aACHC,MAAM,qBACNyF,QAAQ,WACRN,UAAQ,EACRZ,MAAOjG,KAAKuC,MAAMY,sBAClBlB,WAAYjC,KAAKuC,MAAMa,2BAA6B,6BAA+B,iCACnFsC,MAAO1F,KAAKuC,MAAMa,2BAClB0D,SAAU9G,KAAK4H,4BAA4BZ,KAAKhH,MAChDiH,KAAK,QACLrH,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,WAGjE,6BACE,kBAACqG,EAAA,EAAD,CAAQN,KAAK,QAAQE,QAAQ,YAAYK,kBAAgB,EACrDC,QAASzH,KAAKsG,wBAAwBU,KAAKhH,MAC3CJ,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,SAFjE,wBAIA,kBAACqG,EAAA,EAAD,CAAQN,KAAK,QAAQE,QAAQ,WAAWK,kBAAgB,EACtDC,QAASzH,KAAK6H,6BAA6Bb,KAAKhH,MAChDJ,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,SAF/D,YASN,6BACE,kBAACH,EAAA,EAAD,CAAYjB,MAAM,OAAOF,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,SAAtF,4UAGA,6BACE,6BACE,kBAACI,EAAA,EAAD,CACEG,GAAG,kBACHmF,QAAM,EACNlF,MAAM,uBACNmF,UAAQ,EACRZ,MAAOjG,KAAKuC,MAAMc,yBAClBpB,WAAYjC,KAAKuC,MAAMe,8BAAgC,2BAA6B,8BACpFoC,MAAO1F,KAAKuC,MAAMe,8BAClBwD,SAAU9G,KAAK8H,gCAAgCd,KAAKhH,MACpDiH,KAAK,QACLrH,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,SAE5DlB,KAAKuC,MAAMrC,QAAQC,KAAI,SAACC,EAAMC,GAAP,OACtB,kBAAC6G,EAAA,EAAD,CAAU5G,IAAKD,EAAO4F,MAAO5F,GAC1BA,EADH,IACWD,EAAKK,UAIpB,kBAACa,EAAA,EAAD,CACEG,GAAG,aACHC,MAAM,gCACNyF,QAAQ,WACRN,UAAQ,EACRZ,MAAOjG,KAAKuC,MAAMgB,sBAClBtB,WAAYjC,KAAKuC,MAAMiB,2BAA6B,6BAA+B,iCACnFkC,MAAO1F,KAAKuC,MAAMiB,2BAClBsD,SAAU9G,KAAK+H,4BAA4Bf,KAAKhH,MAChDiH,KAAK,QACLrH,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,WAGjE,6BACE,kBAACqG,EAAA,EAAD,CAAQN,KAAK,QAAQE,QAAQ,YAAYK,kBAAgB,EACrDC,QAASzH,KAAKwG,wBAAwBQ,KAAKhH,MAC3CJ,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,SAFjE,wBAIA,kBAACqG,EAAA,EAAD,CAAQN,KAAK,QAAQE,QAAQ,WAAWK,kBAAgB,EACtDC,QAASzH,KAAKgI,6BAA6BhB,KAAKhH,MAChDJ,MAAO,CAACoB,WAAY,MAAOC,YAAa,MAAOC,aAAc,SAF/D,YAQN,kBAACH,EAAA,EAAD,CAAYjB,MAAM,OAAOF,MAAO,CAACwC,gBAAiB,UAAWpB,WAAY,MAAOC,YAAa,MAAOC,aAAc,SAAlH,sJAIA,wBAAItB,MAAO,CAAC+G,OAAQ,SAEpB,qCACA,kBAAC5F,EAAA,EAAD,CAAYjB,MAAM,OAAOF,MAAO,CAACwC,gBAAiB,UAAWpB,WAAY,MAAOC,YAAa,MAAOC,aAAc,SAAlH,iQAMA,kBAAC,EAAD,OAlNK,kBAAC,EAAD,U,GA9TKN,cCFEqH,QACW,cAA7B5J,OAAO6J,SAASC,UAEe,UAA7B9J,OAAO6J,SAASC,UAEhB9J,OAAO6J,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvE,MAAK,SAAAwE,GACjCA,EAAaC,kB","file":"static/js/main.0b8e7829.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';\nimport React, { Component } from \"react\";\n\nclass CategoryTable extends Component {\n  render() {\n    return (\n      <div>\n        <TableContainer component={Paper}>\n          <Table sx={{ minWidth: 500 }} aria-label=\"category table\">\n            <TableHead>\n              <TableRow>\n                <TableCell style={{fontWeight: 'bold'}}>INDEX</TableCell>\n                <TableCell align=\"left\" style={{fontWeight: 'bold'}}>CATEGORY POOL NAME</TableCell>\n                <TableCell align=\"right\" style={{fontWeight: 'bold'}}>BALANCE (wei)</TableCell>\n                <TableCell align=\"right\" style={{fontWeight: 'bold'}}>NEED (wei)</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.props.catList.map((item, index) => (\n                <TableRow\n                  key={index}\n                  sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                >\n                  <TableCell component=\"th\" scope=\"item\">{index}</TableCell>\n                  <TableCell align=\"left\">{item.name}</TableCell>\n                  <TableCell align=\"right\">{item.balance}</TableCell>\n                  <TableCell align=\"right\">{item.need}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n    )\n  }\n}\n\nexport default CategoryTable;\n","import { Typography } from '@mui/material';\nimport React, { Component } from \"react\";\n\nclass NotWeb3 extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Crypto Donater</h1>\n        <Typography align=\"center\" style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}>\n          Welcome to Crypto Donater!\n        </Typography>\n        <Typography align=\"center\" style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}>\n          Please login to your Metamask wallet and connect your account on the Rinkeby Test Network.\n        </Typography>\n      </div>\n    )\n  }\n}\n\nexport default NotWeb3;\n","import React, { Component } from \"react\";\nimport { Typography, TextField } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\nclass GeneralSection extends Component {\n  render() {\n    const StyledTextFieldAccount = styled(TextField)({\n      '& input + fieldset': {\n        borderColor: '#42a5f5',\n        borderWidth: 2,\n      }\n    });\n\n    return (\n      <div>\n        <Typography align=\"left\" style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}>\n          Donors can donate crypto to category pools held in the smart contract.\n        </Typography>\n        <Typography align=\"left\" style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}>\n          Charity organizations can transfer funds from the smart contract to their charity org address when the need arises.\n        </Typography>\n        <Typography align=\"left\" style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}>\n          If the balance of a category pool is insufficent, then charity orgs can update need so that donors can donate to category pools accordingly.\n        </Typography>\n        <div>\n          <TextField\n           id=\"read-only-connected-account\"\n           label=\"Smart Contract Address (Read Only)\"\n           defaultValue={this.props.contractAddress}\n           InputProps={{\n             readOnly: true,\n           }}\n           style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px', width: '90vw'}}\n         />\n        </div>\n        <div>\n          <StyledTextFieldAccount\n           id=\"read-only-connected-account\"\n           label=\"Connected Account (Read Only)\"\n           defaultValue={this.props.accounts[0]}\n           helperText=\"You can disconnect this account by opening Metamask. After that, please refresh this page.\"\n           InputProps={{\n             readOnly: true,\n           }}\n           style={{ marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px', width: '90vw'}}\n         />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default GeneralSection;\n","import React, { Component } from \"react\";\n\nclass Bottom extends Component {\n  render() {\n    return(\n      <div style={{height: '20px', backgroundColor: '#ECECEC', color: '#2C3E50'}} >\n        <div className=\"text-center\">\n          <small>&copy; 2021 Kaushik Nagaraj</small>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Bottom;\n","// Requires react 17.x and over for material-ui. Truffle Unbox React installs react 16.x.\nimport React, { Component } from \"react\";\nimport CryptoDonater from \"./contracts/CryptoDonater.json\";\nimport getWeb3 from \"./getWeb3\";\nimport { Typography, MenuItem, Button, TextField } from '@mui/material';\nimport CategoryTable from \"./components/CategoryTable.js\";\nimport NotWeb3 from \"./components/NotWeb3.js\";\nimport GeneralSection from \"./components/GeneralSection.js\";\nimport Bottom from \"./components/Bottom.js\";\n\nimport Web3 from \"web3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    contractAddress: null,\n    catListLength: null,\n    web3: null,\n    accounts: null,\n    contract: null,\n    catList: null,\n    catName: null,\n    catbalance: null,\n    catNeed: null,\n    inputCategoryValue: \"\",\n    inputCategoryValueError: false,\n    inputAmountValue: \"\",\n    inputAmountValueError: false,\n    inputCreateCategoryValue: \"\",\n    inputCreateCategoryValueError: false,\n    inputCreateNeedAmount: \"\",\n    inputCreateNeedAmountError: false,\n    inputUpdateCategoryValue: \"\",\n    inputUpdateCategoryValueError: false,\n    inputUpdateNeedAmount: \"\",\n    inputUpdateNeedAmountError: false,\n    usd: null\n  };\n\n  componentDidMount = async () => {\n    // console.log(\"Component Did Mount\")\n\n    try {\n\n      // Chainlink Data Feeds for ETH/USD coversion rates\n      const web3oracle = new Web3(`https://rinkeby.infura.io/v3/${process.env.RINKEBY_INFURA_PROJECT_ID}`);\n      const aggregatorV3InterfaceABI = [{ \"inputs\": [], \"name\": \"decimals\", \"outputs\": [{ \"internalType\": \"uint8\", \"name\": \"\", \"type\": \"uint8\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"description\", \"outputs\": [{ \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"uint80\", \"name\": \"_roundId\", \"type\": \"uint80\" }], \"name\": \"getRoundData\", \"outputs\": [{ \"internalType\": \"uint80\", \"name\": \"roundId\", \"type\": \"uint80\" }, { \"internalType\": \"int256\", \"name\": \"answer\", \"type\": \"int256\" }, { \"internalType\": \"uint256\", \"name\": \"startedAt\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"updatedAt\", \"type\": \"uint256\" }, { \"internalType\": \"uint80\", \"name\": \"answeredInRound\", \"type\": \"uint80\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"latestRoundData\", \"outputs\": [{ \"internalType\": \"uint80\", \"name\": \"roundId\", \"type\": \"uint80\" }, { \"internalType\": \"int256\", \"name\": \"answer\", \"type\": \"int256\" }, { \"internalType\": \"uint256\", \"name\": \"startedAt\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"updatedAt\", \"type\": \"uint256\" }, { \"internalType\": \"uint80\", \"name\": \"answeredInRound\", \"type\": \"uint80\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"version\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\n      const addr = \"0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\";\n      const priceFeed = new web3oracle.eth.Contract(aggregatorV3InterfaceABI, addr);\n      priceFeed.methods.latestRoundData().call()\n          .then((roundData) => {\n              this.setState({usd: (roundData.answer/100000000).toFixed(2)});\n              // console.log(\"Latest Round Data\", roundData.answer/100000000)\n          })\n\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      // console.log(\"NETWORK ID\", networkId);\n\n      const deployedNetwork = CryptoDonater.networks[networkId];\n      // console.log(\"DEPLOYED NETWORK\", deployedNetwork);\n\n      const instance = new web3.eth.Contract(\n        CryptoDonater.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // console.log(\"INSTANCE\", instance);\n\n      // Get the length of the category pool list stored in the smart contract.\n      const catListLength = await instance.methods.getCatListLength().call();\n\n      // Get the details (name, balance, need) of the category pool list.\n      // Iterating off-chain to optimize for gas costs.\n      let catList = [];\n      for(let i=0; i<catListLength; i++) {\n        const catValue = await instance.methods.getCatValues(i).call();\n        catList.push({name: catValue[0], balance: catValue[1], need: catValue[2]});\n        // console.log(\"CAT VALUE\", catValue);\n      }\n\n      // Set web3, accounts, contract, category pool list length/details\n      this.setState({\n        web3,\n        accounts,\n        contract: instance ,\n        contractAddress: deployedNetwork.address,\n        catListLength,\n        catList\n      }, this.runExample);\n\n      // Subscribe to all events\n      // instance.events.allEvents({\n      //   fromBlock: 0,\n      //   toBlock: 'latest'\n      // }, function(error, events){ console.log(events); })\n      // .then(function(events){\n      //   console.log(\"Current Event\", events.returnValues)\n      // });\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Please ensure you have logged into you Metamask wallet and connected your account on the Rinkeby Test Network. You can do this by refreshing your page.`\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    // const { accounts, contract } = this.state;\n    // await contract.methods.sendDonation(0).send({ from: accounts[0], value: 100 });\n    // await contract.methods.createCategory(\"Research and Development\", 300).send({ from: accounts[0] });\n    // const sendCharityReturnValue = await contract.methods.sendCharity(0).send({from: accounts[0], value: 1000000000});\n    // console.log(\"SEND CHARITY RETURN VALUE\", sendCharityReturnValue);\n    // await contract.methods.sendDonation(2, 20).send({ from: accounts[0], value: 1 });\n    // console.log(\"THIS.STATE\", this.state);\n  };\n\n\n  // ---------------------------------------------------------------------------------------------\n  // The functions below are written to handle actions that can be performed in the Donate section of the Dapp.\n  // Pending code refactoring.\n  // ---------------------------------------------------------------------------------------------\n\n  handleCategoryInputChange(event) {\n    // console.log(\"Category Input Clicked\", event.target.value);\n    this.setState({inputCategoryValue: event.target.value});\n  }\n\n  handleAmountInputChange(event) {\n    // console.log(\"Amount Input Clicked\", event.target.value);\n    this.setState({inputAmountValue: event.target.value});\n  }\n\n  handleCategoryResetButtonClick(event) {\n    // console.log(\"RESET CLICKED\", event)\n    this.setState({\n      inputCategoryValue: \"\",\n      inputAmountValue: \"\",\n      inputAmountValueError: false,\n      inputCategoryValueError: false\n    });\n  }\n\n  handleDonateButtonClick = async (event) => {\n    try{\n      // console.log(\"DONATE CLICKED\", event);\n      // console.log(this.state.inputCategoryValue, this.state.inputAmountValue);\n      if(this.state.inputCategoryValue === \"\")\n        await this.setState({inputCategoryValueError: true});\n      else\n        await this.setState({inputCategoryValueError: false});\n\n      if(this.state.inputAmountValue === \"\")\n        await this.setState({inputAmountValueError: true});\n      else if(isNaN(this.state.inputAmountValue)) {\n        // console.log(isNaN(this.state.inputAmountValue))\n        await this.setState({inputAmountValueError: true});\n      } else if(this.state.inputAmountValue<0)\n        await this.setState({inputAmountValueError: true});\n      else\n        await this.setState({inputAmountValueError: false});\n\n      // console.log(this.state.inputCategoryValueError, this.state.inputAmountValueError);\n      if(!this.state.inputCategoryValueError && !this.state.inputAmountValueError) {\n        let catList = [];\n        await this.state.contract.methods\n        .sendDonation(this.state.inputCategoryValue)\n        .send({ from: this.state.accounts[0], value: Math.round(this.state.inputAmountValue) })\n        .catch((error) => { alert(`Transaction was NOT sent. Please try again, perhaps after resetting your account. ${'\\n'} Error: ${error.message}` )});\n        for(let i=0; i<this.state.catListLength; i++) {\n          const catValue = await this.state.contract.methods\n          .getCatValues(i)\n          .call()\n          .catch((error) => { console.log(\"Error\", error) });\n          catList.push({name: catValue[0], balance: catValue[1], need: catValue[2]});\n          // console.log(\"CAT VALUE\", catValue);\n        }\n        this.setState({ inputCategoryValue: \"\", inputAmountValue: \"\", catList });\n      }\n    } catch(error) {\n      console.log(\"ERROR2\", error)\n    }\n  }\n\n  // ---------------------------------------------------------------------------------------------\n  // The functions below are written to handle actions that can be performed in the Create Category Pool section of the Dapp.\n  // Pending code refactoring.\n  // ---------------------------------------------------------------------------------------------\n\n    handleCreateCategoryInputChange(event) {\n      // console.log(\"Create Category Input Clicked\", event.target.value);\n      this.setState({inputCreateCategoryValue: event.target.value});\n    }\n\n    handleCreateNeedInputChange(event) {\n      // console.log(\"Create Need Input Clicked\", event.target.value);\n      this.setState({inputCreateNeedAmount: event.target.value});\n    }\n\n    handleCreateResetButtonClick(event) {\n      // console.log(\"RESET CLICKED in Create Category\", event)\n      this.setState({\n        inputCreateCategoryValue: \"\",\n        inputCreateNeedAmount: \"\",\n        inputCreateCategoryValueError: false,\n        inputCreateNeedAmountError: false\n      });\n    }\n\n    handleCreateButtonClick = async (event) => {\n      try{\n        // console.log(\"CREATE CLICKED\", event);\n        // console.log(this.state.inputCreateCategoryValue, this.state.inputCreateNeedAmount);\n        if(this.state.inputCreateCategoryValue === \"\")\n          await this.setState({inputCreateCategoryValueError: true});\n        else\n          await this.setState({inputCreateCategoryValueError: false});\n\n        if(this.state.inputCreateNeedAmount === \"\")\n          await this.setState({inputCreateNeedAmountError: true});\n        else if(isNaN(this.state.inputCreateNeedAmount)) {\n          // console.log(isNaN(this.state.inputCreateNeedAmount))\n          await this.setState({inputCreateNeedAmountError: true});\n        } else if(this.state.inputCreateNeedAmount<0)\n          await this.setState({inputCreateNeedAmountError: true});\n        else\n          await this.setState({inputCreateNeedAmountError: false});\n\n        // console.log(this.state.inputCreateCategoryValueError, this.state.inputCreateNeedAmountError);\n        if(!this.state.inputCreateCategoryValueError && !this.state.inputCreateNeedAmountError) {\n          let catList = [];\n          await this.state.contract.methods\n          .createCategory(this.state.inputCreateCategoryValue, Math.round(this.state.inputCreateNeedAmount))\n          .send({ from: this.state.accounts[0] })\n          .catch((error) => { alert(`Transaction was NOT sent. Please try again, perhaps after resetting your account. ${'\\n'} Error: ${error.message}`)});\n          const catListLength = await this.state.contract.methods.getCatListLength().call();\n          for(let i=0; i<catListLength; i++) {\n            const catValue = await this.state.contract.methods\n              .getCatValues(i)\n              .call()\n              .catch((error) => { console.log(\"Error\", error)});\n            catList.push({name: catValue[0], balance: catValue[1], need: catValue[2]});\n            // console.log(\"CAT VALUE\", catValue);\n          }\n          this.setState({ inputCreateCategoryValue: \"\", inputCreateNeedAmount: \"\", catList, catListLength });\n        }\n      } catch(error) {\n          console.log(\"ERROR2\", error)\n      }\n    }\n\n\n\n  // ---------------------------------------------------------------------------------------------\n  // The functions below are written to handle actions that can be performed in the Update Need for Category Pool section of the Dapp.\n  // Pending code refactoring.\n  // ---------------------------------------------------------------------------------------------\n\n    handleUpdateCategoryInputChange(event) {\n      // console.log(\"Update Category Input Clicked\", event.target.value);\n      this.setState({inputUpdateCategoryValue: event.target.value});\n    }\n\n    handleUpdateNeedInputChange(event) {\n      // console.log(\"Update Need Input Clicked\", event.target.value);\n      this.setState({inputUpdateNeedAmount: event.target.value});\n    }\n\n    handleUpdateResetButtonClick(event) {\n      // console.log(\"RESET CLICKED in Update Category\", event)\n      this.setState({\n        inputUpdateCategoryValue: \"\",\n        inputUpdateNeedAmount: \"\",\n        inputUpdateCategoryValueError: false,\n        inputUpdateNeedAmountError: false\n      });\n    }\n\n    handleUpdateButtonClick = async (event) => {\n      try{\n        // console.log(\"Update CLICKED\", event);\n        // console.log(this.state.inputUpdateCategoryValue, this.state.inputUpdateNeedAmount);\n        if(this.state.inputUpdateCategoryValue === \"\")\n          await this.setState({inputUpdateCategoryValueError: true});\n        else\n          await this.setState({inputUpdateNeedAmountError: false});\n\n        if(this.state.inputUpdateNeedAmount === \"\")\n          await this.setState({inputUpdateNeedAmountError: true});\n        else if(isNaN(this.state.inputUpdateNeedAmount)) {\n          // console.log(isNaN(this.state.inputUpdateNeedAmount))\n          await this.setState({inputUpdateNeedAmountError: true});\n        } else if(this.state.inputUpdateNeedAmount<0)\n          await this.setState({inputUpdateNeedAmountError: true});\n        else\n          await this.setState({inputUpdateNeedAmountError: false});\n\n        // console.log(this.state.inputUpdateCategoryValueError, this.state.inputUpdateNeedAmountError);\n        if(!this.state.inputUpdateCategoryValueError && !this.state.inputUpdateNeedAmountError) {\n          let catList = [];\n          await this.state.contract.methods\n          .updateCategoryNeed(this.state.inputUpdateCategoryValue, Math.round(this.state.inputUpdateNeedAmount))\n          .send({ from: this.state.accounts[0] })\n          .catch((error) => { alert(`Transaction was NOT sent. Please try again, perhaps after resetting your account. ${'\\n'} Error: ${error.message}`)});\n          const catListLength = await this.state.contract.methods.getCatListLength().call();\n          for(let i=0; i<catListLength; i++) {\n            const catValue = await this.state.contract.methods\n              .getCatValues(i)\n              .call()\n              .catch((error) => { console.log(\"Error\", error)});\n            catList.push({name: catValue[0], balance: catValue[1], need: catValue[2]});\n            // console.log(\"CAT VALUE\", catValue);\n          }\n          this.setState({ inputUpdateCategoryValue: \"\", inputUpdateNeedAmount: \"\", catList, catListLength });\n        }\n      } catch(error) {\n          console.log(\"ERROR2\", error)\n      }\n    }\n\n\n  render() {\n    if (!this.state.web3) {\n      return <NotWeb3/>\n    }\n    return (\n      <div className=\"App\">\n        <h1>Crypto Donater</h1>\n        <GeneralSection\n          contractAddress={this.state.contractAddress}\n          accounts={this.state.accounts}\n        />\n\n        <hr style={{margin: '3vw'}}/>\n\n        <h2>Category Pool Table</h2>\n\n        <Typography align=\"left\" style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}>\n          Please review the category pools, balances, and need below.\n        </Typography>\n\n        <div>\n          {\n            this.state.catListLength ?\n            <div style={{margin: '3vw'}}>\n              <CategoryTable catList={this.state.catList}/>\n            </div>\n            :\n            <Typography align=\"left\" style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}>\n              No category pools yet.\n            </Typography>\n          }\n        </div>\n\n        <hr style={{margin: '3vw'}}/>\n\n        <h2>Donor</h2>\n\n        <div>\n          <Typography align=\"left\" style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}>\n            Enter the category pool and amount. Click 'Donate' to initiate a transaction. Once the transaction is complete, please check the category pool table above for updated values. 'Balance' will be incremented and 'Need' will be decremented. USD conversion rate is obtained in real-time from Chainlink data feeds.\n          </Typography>\n\n          <div>\n            <TextField\n              id=\"select-category\"\n              select\n              label=\"Select Category Pool\"\n              required\n              value={this.state.inputCategoryValue}\n              helperText={this.state.inputCategoryValueError ? \"This is a required field\" : \"Please select category pool\"}\n              error={this.state.inputCategoryValueError}\n              onChange={this.handleCategoryInputChange.bind(this)}\n              size=\"small\"\n              style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}\n            >\n              {this.state.catList.map((item, index) => (\n                <MenuItem key={index} value={index}>\n                  {index} {item.name}\n                </MenuItem>\n              ))}\n            </TextField>\n          </div>\n\n          <div>\n            <TextField\n              id=\"enter-amount\"\n              label=\"Amount\"\n              variant=\"outlined\"\n              required\n              value={this.state.inputAmountValue}\n              helperText={this.state.inputAmountValueError ? \"Requires a positive number\" : \"Please enter amount (wei)\"}\n              error={this.state.inputAmountValueError}\n              onChange={this.handleAmountInputChange.bind(this)}\n              size=\"small\"\n              style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}\n            />\n            <TextField\n              id=\"enter-amount\"\n              label=\"Amount in USD\"\n              variant=\"outlined\"\n              required\n              disabled\n              value={(Math.round(this.state.inputAmountValue*this.state.usd/Math.pow(10,18) * 100) / 100).toFixed(2)}\n              helperText={`1 Ether = USD ${this.state.usd}`}\n              size=\"small\"\n              style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}\n            />\n          </div>\n\n          <div>\n            <Button size=\"small\" variant=\"contained\" disableElevation\n                onClick={this.handleDonateButtonClick.bind(this)}\n                style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}\n              >DONATE</Button>\n            <Button size=\"small\" variant=\"outlined\" disableElevation\n              onClick={this.handleCategoryResetButtonClick.bind(this)}\n              style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}\n            >RESET</Button>\n          </div>\n        </div>\n\n        <hr style={{margin: '3vw'}}/>\n\n        <h2>Charity Organization</h2>\n        <div>\n          <Typography align=\"left\" style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}>\n            If you wish to create a new category pool, please submit the form below. Click 'Create Category Pool' to initiate a transaction. Once the transaction is complete, please check the category pool table above for updated values. A new category will be created, its 'Balance' will be set to 0, and its 'Need' will be updated.\n          </Typography>\n          <div>\n            <div>\n              <TextField\n                id=\"enter-category\"\n                label=\"Category Pool Name\"\n                variant=\"outlined\"\n                required\n                value={this.state.inputCreateCategoryValue}\n                helperText={this.state.inputCreateCategoryValueError ? \"This is a required field\" : \"Please enter name of category pool\"}\n                error={this.state.inputCreateCategoryValueError}\n                onChange={this.handleCreateCategoryInputChange.bind(this)}\n                size=\"small\"\n                style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}\n              />\n              <TextField\n                id=\"enter-need\"\n                label=\"Category Pool Need\"\n                variant=\"outlined\"\n                required\n                value={this.state.inputCreateNeedAmount}\n                helperText={this.state.inputCreateNeedAmountError ? \"Requires a positive number\" : \"Please enter need amount (wei)\"}\n                error={this.state.inputCreateNeedAmountError}\n                onChange={this.handleCreateNeedInputChange.bind(this)}\n                size=\"small\"\n                style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}\n              />\n            </div>\n            <div>\n              <Button size=\"small\" variant=\"contained\" disableElevation\n                  onClick={this.handleCreateButtonClick.bind(this)}\n                  style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}\n              >CREATE CATEGORY POOL</Button>\n              <Button size=\"small\" variant=\"outlined\" disableElevation\n                onClick={this.handleCreateResetButtonClick.bind(this)}\n                style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}\n              >RESET</Button>\n            </div>\n          </div>\n        </div>\n\n\n        <div>\n          <Typography align=\"left\" style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}>\n            If you wish to submit additional need for one of the existing category pools, please submit the form below. Click 'Update Category Need' to initiate a transaction. Once the transaction is complete, please check the category pool table above for the updated values. 'Need' total will be incremented by the value you entered here.\n          </Typography>\n          <div>\n            <div>\n              <TextField\n                id=\"select-category\"\n                select\n                label=\"Select Category Pool\"\n                required\n                value={this.state.inputUpdateCategoryValue}\n                helperText={this.state.inputUpdateCategoryValueError ? \"This is a required field\" : \"Please select category pool\"}\n                error={this.state.inputUpdateCategoryValueError}\n                onChange={this.handleUpdateCategoryInputChange.bind(this)}\n                size=\"small\"\n                style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}\n              >\n                {this.state.catList.map((item, index) => (\n                  <MenuItem key={index} value={index}>\n                    {index} {item.name}\n                  </MenuItem>\n                ))}\n              </TextField>\n              <TextField\n                id=\"enter-need\"\n                label=\"Additional Category Pool Need\"\n                variant=\"outlined\"\n                required\n                value={this.state.inputUpdateNeedAmount}\n                helperText={this.state.inputUpdateNeedAmountError ? \"Requires a positive number\" : \"Please enter need amount (wei)\"}\n                error={this.state.inputUpdateNeedAmountError}\n                onChange={this.handleUpdateNeedInputChange.bind(this)}\n                size=\"small\"\n                style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}\n              />\n            </div>\n            <div>\n              <Button size=\"small\" variant=\"contained\" disableElevation\n                  onClick={this.handleUpdateButtonClick.bind(this)}\n                  style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}\n              >UPDATE CATEGORY NEED</Button>\n              <Button size=\"small\" variant=\"outlined\" disableElevation\n                onClick={this.handleUpdateResetButtonClick.bind(this)}\n                style={{marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}\n              >RESET</Button>\n            </div>\n          </div>\n        </div>\n\n        <Typography align=\"left\" style={{backgroundColor: '#ECECEC', marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}>\n          [Future Development]: Charity organization can initiate a transaction to transfer funds from the category pools to their respective org's address.\n        </Typography>\n\n        <hr style={{margin: '3vw'}}/>\n\n        <h2>Admin</h2>\n        <Typography align=\"left\" style={{backgroundColor: '#ECECEC', marginLeft: '3vw', marginRight: '3vw', marginBottom: '20px'}}>\n          [Future Development] Admin (contract owner) can edit/update name of an existing category pool. Non-owners will not be able to do this.\n          However, the smart contract function has been implemented/tested already using OpenZeppelin's ownable access contract.\n        </Typography>\n\n\n        <Bottom/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}